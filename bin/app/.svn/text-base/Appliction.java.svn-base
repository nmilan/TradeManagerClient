package app;

import hibernate.remotes.SessionBeanRemote;

import java.awt.BorderLayout;
import java.awt.Color;

import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.UIManager.LookAndFeelInfo;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;

import localization.Local;
import radnici.RadniciPanel;
import remotes.RemotesManager;
import skin.SkinChosser;
import states.StateManager;
import exceptions.login.BadUserPassException;

public class Appliction{
	private static Appliction instance = null;
	private MainFrame mainFrame = null;
	private SkinChosser skinChosser = null;
	private RadniciPanel radniciPanel = null;
	
	
	public RadniciPanel getRadniciPanel() {
		if(radniciPanel==null){
			radniciPanel = new RadniciPanel();
		}
		return radniciPanel;
	}

	public static Appliction getInstance() {
		if (instance == null)
			instance = new Appliction();
		return instance;
	}
	
	public SkinChosser getSkinChosser() {
		return skinChosser;
	}
	
	public MainFrame getMainFrame() {
		return mainFrame;
	}
	
	public void setNultiMod(){
		try {
			getMainFrame().getContentPanel().remove(2);
		} catch (Exception e) {}
		getMainFrame().getStanjeLabela().setText("Opcija: ");
		getMainFrame().getContentPanel().updateUI();
	}
	
	public void setPregledRadnikaMod(){
		try {
			getMainFrame().getContentPanel().remove(2);
		} catch (Exception e) {}
		//getMainFrame().getContentPanel().add(getRadniciPanel(), BorderLayout.CENTER);
		getMainFrame().addNewTab("Pregled zaposlenih", getRadniciPanel());
		getRadniciPanel().getRadniciTable().removeMouseListener(StateManager.getInstance().getPregledRadnikaState());
		getRadniciPanel().getRadniciTable().addMouseListener(StateManager.getInstance().getPregledRadnikaState());
		getRadniciPanel().getDetaljPanel().restartujSe();
		getRadniciPanel().getDetaljPanel().setPregled();
		getRadniciPanel().reload(getRadniciPanel().getLastSearchNames(), getRadniciPanel().getLastSearchValues());
		getMainFrame().getStanjeLabela().setText("Opcija: Pregled zaposlenih");
		getMainFrame().getContentPanel().updateUI();
	}
	
	private Appliction() {
		skinChosser = new SkinChosser(0);
		mainFrame = new MainFrame();
		//new RadnikDialog(null, false);
		//initLogin();
	}
	
	public static void setNimbusLookAndFeel() {
		try {
			UIManager.put("nimbusFocus", new Color(249,209,0));
			UIManager.put("nimbusSelectedText", new Color(249,209,0));
			UIManager.put("nimbusSelectionBackground", Color.BLACK);
			UIManager.put("nimbusBlueGrey", new Color(45,45,45));
			UIManager.put("nimbusBase", new Color(51,51,51));
			UIManager.put("control", new Color(51,51,51));
			UIManager.put("text", new Color(249,209,0));
			UIManager.put("nimbusLightBackground", new Color(102,102,102));
			for (LookAndFeelInfo laf : UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(laf.getName()))
					UIManager.setLookAndFeel(laf.getClassName());
			}
		} catch (Exception e) {
			System.out.println("Error setting nimbus LAF: " + e);
		}
	}
	
	public static void main(String[] args) {
		UIManager.put("OptionPane.cancelButtonText", Local.getString("CANCEL"));
		UIManager.put("OptionPane.noButtonText", Local.getString("NO"));
	    UIManager.put("OptionPane.yesButtonText", Local.getString("YES"));
		setNimbusLookAndFeel();
		//new BeanPool();
		Appliction.getInstance();
	}
	
	public void initLogin () {
		final JTextField username = new JTextField(20);
		final JPasswordField password = new JPasswordField(20);
		JLabel userLabel = new JLabel(Local.getString("LOGIN.USERNAME") + ":");
		JLabel passLabel = new JLabel(Local.getString("LOGIN.PASSWORD") + ":");
		String user = "";
		String pass = "";
		Object[] dialogObj = {userLabel, username, passLabel, password};
		boolean auth = false;
		username.addAncestorListener(new AncestorListener() {
            public void ancestorAdded(AncestorEvent event) {
            	username.requestFocusInWindow();
            }
            public void ancestorMoved(AncestorEvent event) {}
            public void ancestorRemoved(AncestorEvent event) {}
        });
		while (!auth){
			password.setText(null);
			int confirm = JOptionPane.showConfirmDialog(null, dialogObj, Local.getString("LOGIN"), JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
			if (confirm == JOptionPane.YES_OPTION){
				pass = new String(password.getPassword());
				user = username.getText();
				SessionBeanRemote sr = RemotesManager.getInstance().getSessionRemote();
				try {
					sr.login(user, pass);
					auth = true;
					JOptionPane.showMessageDialog(null,Local.getString("LOGIN.0"), Local.getString("ERROR"), JOptionPane.INFORMATION_MESSAGE);
					skinChosser = new SkinChosser(1);
					mainFrame = new MainFrame();
				} catch (BadUserPassException e) {
					JOptionPane.showMessageDialog(null, Local.getString("LOGIN.1"), Local.getString("SUCCESS"), JOptionPane.ERROR_MESSAGE);
					e.printStackTrace();
				}
			}else
				System.exit(0);
		}
	}
}
